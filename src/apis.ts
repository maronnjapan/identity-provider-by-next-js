/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * OpenID ConnectのAPI
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type GetWellKnownJwksJson200KeysItemOthItem = {
  r?: string;
  d?: string;
  t?: string;
};

export type GetWellKnownJwksJson200KeysItem = {
  kid: string;
  kty: string;
  use?: string;
  key_ops?: string[];
  alg?: string;
  n?: string;
  e?: string;
  d?: string;
  p?: string;
  q?: string;
  dp?: string;
  dq?: string;
  qi?: string;
  oth?: GetWellKnownJwksJson200KeysItemOthItem[];
  crv?: string;
  x?: string;
  y?: string;
  ext?: boolean;
  k?: string;
};

export type GetWellKnownJwksJson200 = {
  keys: GetWellKnownJwksJson200KeysItem[];
};

export type PostLogin200 = {
  userId: string;
};

export type PostLoginBody = {
  /** ユーザーのメールアドレス */
  email: string;
  /**
   * ユーザーのパスワード
   * @minLength 6
   */
  password: string;
};

export type PostAuthorize200 = {
  /** CSRF対策 */
  state: string;
  /** アクセストークン取得に使用 */
  code: string;
  /** 認可コードを送信するURI */
  redirect_uri: string;
};

/**
 * 仕様書では推奨だが、セキュリティを考え必須とする
 */
export type PostAuthorizeBodyCodeChallengeMethod = typeof PostAuthorizeBodyCodeChallengeMethod[keyof typeof PostAuthorizeBodyCodeChallengeMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthorizeBodyCodeChallengeMethod = {
  plain: 'plain',
  S256: 'S256',
} as const;

/**
 * code: 認可コード, token: アクセストークン, id_token: IDトークン
 */
export type PostAuthorizeBodyResponseType = typeof PostAuthorizeBodyResponseType[keyof typeof PostAuthorizeBodyResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthorizeBodyResponseType = {
  code: 'code',
} as const;

/**
 * authorization_code: 認可コード取得, refresh_token: リフレッシュトークン取得
 */
export type PostAuthorizeBodyGrantType = typeof PostAuthorizeBodyGrantType[keyof typeof PostAuthorizeBodyGrantType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthorizeBodyGrantType = {
  authorization_code: 'authorization_code',
  refresh_token: 'refresh_token',
} as const;

export type PostAuthorizeBody = {
  client_id: string;
  /** Publicクライアントからのリクエスト時は必須 */
  redirect_uri?: string;
  /** authorization_code: 認可コード取得, refresh_token: リフレッシュトークン取得 */
  grant_type: PostAuthorizeBodyGrantType;
  /** CSRF対策 */
  state: string;
  /** アクセス権限 */
  scope: string;
  /** code: 認可コード, token: アクセストークン, id_token: IDトークン */
  response_type: PostAuthorizeBodyResponseType;
  /** IDトークンの検証に使用 */
  nonce?: string;
  /** 仕様書では推奨だが、セキュリティを考え必須とする */
  code_challenge_method: PostAuthorizeBodyCodeChallengeMethod;
  /** 仕様書では推奨だが、セキュリティを考え必須とする */
  code_challenge: string;
};

export type PostOauthToken201TokenType = typeof PostOauthToken201TokenType[keyof typeof PostOauthToken201TokenType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOauthToken201TokenType = {
  Bearer: 'Bearer',
} as const;

export type PostOauthToken201 = {
  access_token: string;
  token_type: PostOauthToken201TokenType;
  expires_in: number;
  /** リフレッシュトークンの要求もあった時のみ返却する */
  refresh_token?: string;
  id_token: string;
};

/**
 * authorization_code: 認可コード取得, refresh_token: リフレッシュトークン取得
 */
export type PostOauthTokenBodyGrantType = typeof PostOauthTokenBodyGrantType[keyof typeof PostOauthTokenBodyGrantType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOauthTokenBodyGrantType = {
  authorization_code: 'authorization_code',
  refresh_token: 'refresh_token',
} as const;

export type PostOauthTokenBody = {
  /** Publicクライアントからのリクエスト時は必須 */
  client_id?: string;
  /** Publicクライアントからのリクエスト時は必須 */
  redirect_uri?: string;
  /** authorization_code: 認可コード取得, refresh_token: リフレッシュトークン取得 */
  grant_type: PostOauthTokenBodyGrantType;
  code: string;
  /** 仕様書では推奨だが、セキュリティを考え必須とする */
  code_verifier: string;
};





  export const postOauthToken = <TData = AxiosResponse<PostOauthToken201>>(
    postOauthTokenBody: PostOauthTokenBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8787/oauth/token`,
      postOauthTokenBody,options
    );
  }

export const postAuthorize = <TData = AxiosResponse<PostAuthorize200>>(
    postAuthorizeBody: PostAuthorizeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8787/authorize`,
      postAuthorizeBody,options
    );
  }

export const postLogin = <TData = AxiosResponse<PostLogin200>>(
    postLoginBody: PostLoginBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8787/login`,
      postLoginBody,options
    );
  }

export const getWellKnownJwksJson = <TData = AxiosResponse<GetWellKnownJwksJson200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8787/.well-known/jwks.json`,options
    );
  }

export type PostOauthTokenResult = AxiosResponse<PostOauthToken201>
export type PostAuthorizeResult = AxiosResponse<PostAuthorize200>
export type PostLoginResult = AxiosResponse<PostLogin200>
export type GetWellKnownJwksJsonResult = AxiosResponse<GetWellKnownJwksJson200>
